{
  "parserOptions": {
    "ecmaVersion": 2018,
    // set to "script" (default) or "module" if your code is in ECMAScript modules
    "sourceType": "module",
    "ecmaFeatures": {
      // allow return statements in the global scope
      "globalReturn": false,
      //enable global strict mode (if ecmaVersion is 5 or greater)
      "impliedStrict": true,
      // enable JSX
      "jsx": true
    }
  },
  "env": {
    // browser global variables
    "browser": true,
    // Node.js global variables and Node.js scoping
    "node": true,
    // enable all ECMAScript 6 features except for modules (this automatically sets the ecmaVersion parser option to 6).
    "es6": true
  },
  "rules": {
    // POSSIBLE ERRORS - these rules relate to possible syntax or logic errors in JavaScript code

    // enforce "for" loop update clause moving the counter in the right direction
    "for-direction": "off",
    // enforce return statements in getters
    "getter-return": "off",
    // disallow await inside of loops
    "no-await-in-loop": "off",
    // disallow comparing against -0
    "no-compare-neg-zero": "off",
    // disallow assignment operators in conditional expressions
    "no-cond-assign": [
      "warn",
      "except-parens"
    ],
    // disallow the use of console
    "no-console": "off",
    // disallow constant expressions in conditions
    "no-constant-condition": "off",
    // disallow control characters in regular expressions
    "no-control-regex": "off",
    // disallow the use of debugger
    "no-debugger": "off",
    // disallow duplicate arguments in function definitions
    "no-dupe-args": "error",
    // disallow duplicate keys in object literals
    "no-dupe-keys": "error",
    // disallow duplicate case labels
    "no-duplicate-case": "error",
    // disallow empty block statements
    "no-empty": "off",
    // disallow empty character classes in regular expressions
    "no-empty-character-class": "warn",
    // disallow reassigning exceptions in catch clauses
    "no-ex-assign": "warn",
    // disallow unnecessary boolean casts
    "no-extra-boolean-cast": "warn",
    // disallow unnecessary parentheses
    "no-extra-parens": "off",
    // disallow unnecessary semicolons
    "no-extra-semi": "warn",
    // disallow reassigning function declarations
    "no-func-assign": "warn",
    // disallow function or var declarations in nested blocks
    "no-inner-declarations": [
      "warn",
      "both"
    ],
    // disallow invalid regular expression strings in RegExp constructors
    "no-invalid-regexp": "error",
    // disallow irregular whitespace outside of strings and comments
    "no-irregular-whitespace": "off",
    // disallow calling global object properties as functions
    "no-obj-calls": "error",
    // disallow calling some Object.prototype methods directly on objects
    "no-prototype-builtins": "off",
    // disallow multiple spaces in regular expressions
    "no-regex-spaces": "off",
    // disallow sparse arrays
    "no-sparse-arrays": "error",
    // disallow template literal placeholder syntax in regular strings
    "no-template-curly-in-string": "off",
    // disallow confusing multiline expressions
    "no-unexpected-multiline": "warn",
    // disallow unreachable code after return, throw, continue, and break statements
    "no-unreachable": "warn",
    // disallow control flow statements in finally blocks
    "no-unsafe-finally": "off",
    // disallow negating the left operand of relational operators
    "no-unsafe-negation": "off",
    // require calls to isNaN() when checking for NaN
    "use-isnan": "error",
    // enforce valid JSDoc comments
    "valid-jsdoc": "off",
    // enforce comparing typeof expressions against valid strings
    "valid-typeof": "error",

    // BEST PRACTICES - these rules relate to better ways of doing things to help you avoid problems

    // enforce getter and setter pairs in objects
    "accessor-pairs": "off",
    // enforce return statements in callbacks of array methods
    "array-callback-return": "error",
    // enforce the use of variables within the scope they are defined
    "block-scoped-var": "error",
    // enforce that class methods utilize this
    "class-methods-use-this": "off",
    // enforce a maximum cyclomatic complexity allowed in a program
    "complexity": [
      "warn",
      {
        "max": 20
      }
    ],
    // require return statements to either always or never specify values
    "consistent-return": "off",
    // enforce consistent brace style for all control statements
    "curly": [
      "warn",
      "multi-line",
      "consistent"
    ],
    // require default cases in switch statements
    "default-case": "off",
    // enforce consistent newlines before and after dots
    "dot-location": "off",
    // enforce dot notation whenever possible
    "dot-notation": "warn",
    // require the use of === and !==
    "eqeqeq": "error",
    // require for-in loops to include an if statement
    "guard-for-in": "off",
    // disallow the use of alert, confirm, and prompt
    "no-alert": "warn",
    // disallow the use of arguments.caller or arguments.callee
    "no-caller": "error",
    // disallow lexical declarations in case clauses
    "no-case-declarations": "warn",
    // disallow division operators explicitly at the beginning of regular expressions
    "no-div-regex": "off",
    // disallow else blocks after return statements in if statements
    "no-else-return": "off",
    // disallow empty functions
    "no-empty-function": "off",
    // disallow empty destructuring patterns
    "no-empty-pattern": "off",
    // disallow null comparisons without type-checking operators
    "no-eq-null": "error",
    // disallow the use of eval()
    "no-eval": "error",
    // disallow extending native types
    "no-extend-native": "error",
    // disallow unnecessary calls to .bind()
    "no-extra-bind": "warn",
    // disallow unnecessary labels
    "no-extra-label": "warn",
    // disallow fallthrough of case statements
    "no-fallthrough": "off",
    // disallow leading or trailing decimal points in numeric literals
    "no-floating-decimal": "warn",
    // disallow assignments to native objects or read-only global variables
    "no-global-assign": "error",
    // disallow shorthand type conversions
    "no-implicit-coercion": [
      "warn",
      {
        "allow": [
          "!!",
          "+"
        ]
      }
    ],
    // disallow variable and function declarations in the global scope
    "no-implicit-globals": "off",
    // disallow the use of eval()-like methods
    "no-implied-eval": "error",
    // disallow this keywords outside of classes or class-like objects
    "no-invalid-this": "warn",
    // disallow the use of the __iterator__ property
    "no-iterator": "error",
    // disallow labeled statements
    "no-labels": "error",
    // disallow unnecessary nested blocks
    "no-lone-blocks": "warn",
    // disallow function declarations and expressions inside loop statements
    "no-loop-func": "warn",
    // disallow magic numbers
    "no-magic-numbers": "off",
    // disallow multiple spaces
    "no-multi-spaces": "off",
    // disallow multiline strings
    "no-multi-str": "warn",
    // disallow new operators outside of assignments or comparisons
    "no-new": "warn",
    // disallow new operators with the Function object
    "no-new-func": "error",
    // disallow new operators with the String, Number, and Boolean objects
    "no-new-wrappers": "warn",
    // disallow octal literals
    "no-octal": "error",
    // disallow octal escape sequences in string literals
    "no-octal-escape": "error",
    // disallow reassigning function parameters
    "no-param-reassign": "off",
    // disallow the use of the __proto__ property
    "no-proto": "error",
    // disallow variable redeclaration
    "no-redeclare": [
      "error",
      {
        "builtinGlobals": true
      }
    ],
    // disallow certain properties on certain objects
    "no-restricted-properties": "off",
    // disallow assignment operators in return statements
    "no-return-assign": [
      "warn",
      "except-parens"
    ],
    // disallow unnecessary return await
    "no-return-await": "off",
    // disallow javascript: urls
    "no-script-url": "error",
    // disallow assignments where both sides are exactly the same
    "no-self-assign": "error",
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": "error",
    // disallow comma operators
    "no-sequences": "warn",
    // disallow throwing literals as exceptions
    "no-throw-literal": "warn",
    // disallow unmodified loop conditions
    "no-unmodified-loop-condition": "off",
    // disallow unused expressions
    "no-unused-expressions": [
      "warn",
      {
        "allowShortCircuit": true,
        "allowTernary": true
      }
    ],
    // disallow unused labels
    "no-unused-labels": "warn",
    // disallow unnecessary calls to .call() and .apply()
    "no-useless-call": "warn",
    // disallow unnecessary concatenation of literals or template literals
    "no-useless-concat": "warn",
    // disallow unnecessary escape characters
    "no-useless-escape": "warn",
    // disallow redundant return statements
    "no-useless-return": "off",
    // disallow void operators
    "no-void": "error",
    // disallow specified warning terms in comments
    "no-warning-comments": "off",
    // disallow with statements
    "no-with": "error",
    // require using Error objects as Promise rejection reasons
    "prefer-promise-reject-errors": "off",
    // enforce the consistent use of the radix argument when using parseInt()
    "radix": "off",
    // disallow async functions which have no await expression
    "require-await": "off",
    // require var declarations be placed at the top of their containing scope
    "vars-on-top": "error",
    // require parentheses around immediate function invocations
    "wrap-iife": [
      "warn",
      "any"
    ],
    // require or disallow “Yoda” conditions
    "yoda": "warn",

    // STRICT MODE - these rules relate to strict mode directives

    // require or disallow strict mode directives
    "strict": [
      "warn",
      "global"
    ],

    // VARIABLES - these rules relate to variable declarations

    // require or disallow initialization in variable declarations
    "init-declarations": "off",
    // disallow catch clause parameters from shadowing variables in the outer scope
    "no-catch-shadow": "off",
    // disallow deleting variables
    "no-delete-var": "warn",
    // disallow labels that share a name with a variable
    "no-label-var": "warn",
    // disallow specified global variables
    "no-restricted-globals": "off",
    // disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow": "warn",
    // disallow identifiers from shadowing restricted names
    "no-shadow-restricted-names": "error",
    // disallow the use of undeclared variables unless mentioned in /*global */ comments
    "no-undef": [
      "error",
      {
        "typeof": false
      }
    ],
    // disallow initializing variables to undefined
    "no-undef-init": "warn",
    // disallow the use of undefined as an identifier
    "no-undefined": "error",
    // disallow unused variables
    "no-unused-vars": "off",
    // disallow the use of variables before they are defined
    "no-use-before-define": "error",

    // NODE.JS AND COMMONJS - these rules relate to code running in Node.js, or in browsers with CommonJS

    // require return statements after callbacks
    "callback-return": "off",
    // require require() calls to be placed at top-level module scope
    "global-require": "off",
    // require error handling in callbacks
    "handle-callback-err": [
      "warn",
      "^.*(e|E)rr"
    ],
    // disallow use of the Buffer() constructor
    "no-buffer-constructor": "off",
    // disallow require calls to be mixed with regular variable declarations
    "no-mixed-requires": "off",
    // disallow new operators with calls to require
    "no-new-require": "warn",
    // disallow string concatenation with __dirname and __filename
    "no-path-concat": "off",
    // disallow the use of process.env
    "no-process-env": "off",
    // disallow the use of process.exit()
    "no-process-exit": "error",
    // disallow specified modules when loaded by require
    "no-restricted-modules": "off",
    // disallow synchronous methods
    "no-sync": "off",

    // STYLISTIC ISSUES - these rules relate to style guidelines, and are therefore quite subjective

    // enforce linebreaks after opening and before closing array brackets
    "array-bracket-newline": "off",
    // enforce consistent spacing inside array brackets
    "array-bracket-spacing": [
      "warn",
      "never"
    ],
    // enforce line breaks after each array element
    "array-element-newline": "off",
    // disallow or enforce spaces inside of blocks after opening block and before closing block
    "block-spacing": [
      "warn",
      "always"
    ],
    // enforce consistent brace style for blocks
    "brace-style": [
      "warn",
      "stroustrup",
      {
        "allowSingleLine": true
      }
    ],
    // enforce camelcase naming convention
    "camelcase": "off",
    // enforce or disallow capitalization of the first letter of a comment
    "capitalized-comments": "off",
    // require or disallow trailing commas
    "comma-dangle": [
      "error",
      "never"
    ],
    // enforce consistent spacing before and after commas
    "comma-spacing": [
      "warn",
      {
        "before": false,
        "after": true
      }
    ],
    // enforce consistent comma style
    "comma-style": [
      "warn",
      "last"
    ],
    // enforce consistent spacing inside computed property brackets
    "computed-property-spacing": [
      "warn",
      "never"
    ],
    // enforce consistent naming when capturing the current execution context
    "consistent-this": "off",
    // require or disallow newline at the end of files
    "eol-last": [
      "warn",
      "unix"
    ],
    // require or disallow spacing between function identifiers and their invocations
    "func-call-spacing": "warn",
    // require function names to match the name of the variable or property to which they are assigned
    "func-name-matching": "off",
    // require or disallow named function expressions
    "func-names": "off",
    // enforce the consistent use of either function declarations or expressions
    "func-style": [
      "warn",
      "expression",
      {
        "allowArrowFunctions": true
      }
    ],
    // enforce consistent line breaks inside function parentheses
    "function-paren-newline": "off",
    // disallow specified identifiers
    "id-blacklist": "off",
    // enforce minimum and maximum identifier lengths
    "id-length": "off",
    // require identifiers to match a specified regular expression
    "id-match": "off",
    // enforce the location of arrow function bodies
    "implicit-arrow-linebreak": "off",
    // enforce consistent indentation
    "indent": [
      "warn",
      4
    ],
    // enforce the consistent use of either double or single quotes in JSX attributes
    "jsx-quotes": "off",
    // enforce consistent spacing between keys and values in object literal properties
    "key-spacing": [
      "warn",
      {
        "beforeColon": true,
        "afterColon": true,
        "mode": "minimum"
      }
    ],
    // enforce consistent spacing before and after keywords
    "keyword-spacing": [
      "warn",
      {
        "before": false,
        "after": true,
        "overrides": {
          "while": {
            "before": true
          },
          "return": {
            "before": true
          },
          "throw": {
            "before": true
          },
          "from": {
            "before": true
          },
          "break": {
            "before": true
          },
          "continue": {
            "before": true
          }
        }
      }
    ],
    // enforce position of line comments
    "line-comment-position": "off",
    // enforce consistent linebreak style
    "linebreak-style": "off",
    // require empty lines around comments
    "lines-around-comment": "off",
    // require or disallow an empty line between class members
    "lines-between-class-members": "off",
    // enforce a maximum depth that blocks can be nested
    "max-depth": [
      "warn",
      {
        "max": 8
      }
    ],
    // enforce a maximum line length
    "max-len": [
      "warn",
      {
        "code": 120,
        "tabWidth": 4,
        "ignorePattern": "^\\s*?<\\w.*?$",
        "ignoreUrls": true,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true
      }
    ],
    // enforce a maximum number of lines per file
    "max-lines": "off",
    // enforce a maximum depth that callbacks can be nested
    "max-nested-callbacks": [
      "error",
      3
    ],
    // enforce a maximum number of parameters in function definitions
    "max-params": [
      "warn",
      5
    ],
    // enforce a maximum number of statements allowed in function blocks
    "max-statements": "off",
    // enforce a maximum number of statements allowed per line
    "max-statements-per-line": [
      "warn",
      {
        "max": 3
      }
    ],
    // enforce a particular style for multiline comments
    "multiline-comment-style": "off",
    // enforce newlines between operands of ternary expressions
    "multiline-ternary": "off",
    // require constructor names to begin with a capital letter
    "new-cap": [
      "warn",
      {
        "newIsCap": true,
        "capIsNew": false
      }
    ],
    // require parentheses when invoking a constructor with no arguments
    "new-parens": "warn",
    // require a newline after each call in a method chain
    "newline-per-chained-call": [
      "warn",
      {
        "ignoreChainWithDepth": 4
      }
    ],
    // disallow Array constructors
    "no-array-constructor": "warn",
    // disallow bitwise operators
    "no-bitwise": [
      "warn",
      {
        "allow": [
          "~"
        ]
      }
    ],
    // disallow continue statements
    "no-continue": "off",
    // disallow inline comments after code
    "no-inline-comments": "off",
    // disallow if statements as the only statement in else blocks
    "no-lonely-if": "warn",
    // disallow mixed binary operators
    "no-mixed-operators": "off",
    // disallow mixed spaces and tabs for indentation
    "no-mixed-spaces-and-tabs": "warn",
    // disallow use of chained assignment expressions
    "no-multi-assign": "off",
    // disallow multiple empty lines
    "no-multiple-empty-lines": [
      "warn",
      {
        "max": 2,
        "maxEOF": 1,
        "maxBOF": 0
      }
    ],
    // disallow negated conditions
    "no-negated-condition": "off",
    // disallow nested ternary expressions
    "no-nested-ternary": "warn",
    // disallow Object constructors
    "no-new-object": "warn",
    // disallow the unary operators ++ and --
    "no-plusplus": "off",
    // disallow specified syntax
    "no-restricted-syntax": [
      "error",
      //"ClassDeclaration",
      //"ClassExpression",
      "LabeledStatement",
      "SwitchStatement",
      "WithStatement"
    ],
    // disallow all tabs
    "no-tabs": "off",
    // disallow ternary operators
    "no-ternary": "off",
    // disallow trailing whitespace at the end of lines
    "no-trailing-spaces": "warn",
    // disallow dangling underscores in identifiers
    "no-underscore-dangle": "off",
    // disallow ternary operators when simpler alternatives exist
    "no-unneeded-ternary": "warn",
    // disallow whitespace before properties
    "no-whitespace-before-property": "warn",
    // enforce the location of single-line statements
    "nonblock-statement-body-position": "off",
    // enforce consistent line breaks inside braces
    "object-curly-newline": "off",
    // enforce consistent spacing inside braces
    "object-curly-spacing": [
      "warn",
      "never"
    ],
    // enforce placing object properties on separate lines
    "object-property-newline": "off",
    // enforce variables to be declared either together or separately in functions
    "one-var": "off",
    // require or disallow newlines around variable declarations
    "one-var-declaration-per-line": [
      "warn",
      "initializations"
    ],
    // require or disallow assignment operator shorthand where possible
    "operator-assignment": "off",
    // enforce consistent linebreak style for operators
    "operator-linebreak": [
      "warn",
      "after",
      {
        "overrides": {
          "||": "ignore",
          "&&": "ignore"
        }
      }
    ],
    // require or disallow padding within blocks
    "padded-blocks": "off",
    // require or disallow padding lines between statements
    "padding-line-between-statements": "off",
    // require quotes around object literal property names
    "quote-props": "off",
    // enforce the consistent use of either backticks, double, or single quotes
    "quotes": [
      "warn",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    // require JSDoc comments
    "require-jsdoc": [
      "off",
      {
        "require": {
          "ClassDeclaration": true,
          "FunctionDeclaration": true,
          "MethodDefinition": true
        }
      }
    ],
    // require or disallow semicolons instead of ASI
    "semi": [
      "error",
      "always"
    ],
    // enforce consistent spacing before and after semicolons
    "semi-spacing": [
      "warn",
      {
        "before": false,
        "after": true
      }
    ],
    // enforce location of semicolons
    "semi-style": "off",
    // require object keys to be sorted
    "sort-keys": "off",
    // require variables within the same declaration block to be sorted
    "sort-vars": "off",
    // enforce consistent spacing before blocks
    "space-before-blocks": [
      "warn",
      {
        "functions": "never",
        "keywords": "never",
        "classes": "always"
      }
    ],
    // enforce consistent spacing before function definition opening parenthesis
    "space-before-function-paren": [
      "warn",
      "never"
    ],
    // enforce consistent spacing inside parentheses
    "space-in-parens": [
      "warn",
      "never"
    ],
    // require spacing around infix operators
    "space-infix-ops": [
      "warn"
    ],
    // enforce consistent spacing before or after unary operators
    "space-unary-ops": [
      "warn",
      {
        "words": true,
        "nonwords": false
      }
    ],
    // enforce consistent spacing after the //  or /* in a comment
    "spaced-comment": [
      "warn",
      "always",
      {
        "markers": [
          "!"
        ]
      }
    ],
    // enforce spacing around colons of switch statements
    "switch-colon-spacing": "off",
    // require or disallow spacing between template tags and their literals
    "template-tag-spacing": "off",
    // require or disallow Unicode byte order mark (BOM)
    "unicode-bom": "off",
    // require parenthesis around regex literals
    "wrap-regex": "off",

    // ECMASCRIPT 6 - these rules relate to ES6, also known as ES2015

    // require braces around arrow function bodies
    "arrow-body-style": "off",
    // require parentheses around arrow function arguments
    "arrow-parens": "off",
    // enforce consistent spacing before and after the arrow in arrow functions
    "arrow-spacing": [
      "warn",
      {
        "before": true,
        "after": true
      }
    ],
    // require super() calls in constructors
    "constructor-super": "off",
    // enforce consistent spacing around * operators in generator functions
    "generator-star-spacing": [
      "warn",
      {
        "before": false,
        "after": false
      }
    ],
    // disallow reassigning class members
    "no-class-assign": "warn",
    // disallow arrow functions where they could be confused with comparisons
    "no-confusing-arrow": [
      "warn",
      {
        "allowParens": true
      }
    ],
    // disallow reassigning const variables
    "no-const-assign": "error",
    // disallow duplicate class members
    "no-dupe-class-members": "error",
    // disallow duplicate module imports
    "no-duplicate-imports": "warn",
    // disallow new operators with the Symbol object
    "no-new-symbol": "error",
    // disallow specified modules when loaded by import
    "no-restricted-imports": "off",
    // disallow this/super before calling super() in constructors
    "no-this-before-super": "error",
    // disallow unnecessary computed property keys in object literals
    "no-useless-computed-key": "off",
    // disallow unnecessary constructors
    "no-useless-constructor": "off",
    // disallow renaming import, export, and destructured assignments to the same name
    "no-useless-rename": "off",
    // require let or const instead of var
    "no-var": "warn",
    // require or disallow method and property shorthand syntax for object literals
    "object-shorthand": "off",
    // require using arrow functions for callbacks
    "prefer-arrow-callback": "off",
    // require const declarations for variables that are never reassigned after declared
    "prefer-const": "warn",
    // require destructuring from arrays and/or objects
    "prefer-destructuring": "off",
    // disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals
    "prefer-numeric-literals": "off",
    // require rest parameters instead of arguments
    "prefer-rest-params": "warn",
    // require spread operators instead of .apply()
    "prefer-spread": "warn",
    // require template literals instead of string concatenation
    "prefer-template": "warn",
    // require generator functions to contain yield
    "require-yield": "warn",
    // enforce spacing between rest and spread operators and their expressions
    "rest-spread-spacing": "off",
    // enforce sorted import declarations within modules
    "sort-imports": "off",
    // require symbol descriptions
    "symbol-description": "off",
    // require or disallow spacing around embedded expressions of template strings
    "template-curly-spacing": [
      "warn",
      "never"
    ],
    // require or disallow spacing around the * in yield* expressions
    "yield-star-spacing": [
      "warn",
      {
        "before": false,
        "after": true
      }
    ]
  }
}
